package com.ssafy.scentify.schedule.model.dto;

import java.sql.Time;
import java.util.UUID;

import groovy.transform.ToString;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Getter
@ToString
@NoArgsConstructor
@AllArgsConstructor
public class CustomScheduleDto {
    private String name;
    private int deviceId;
    private String userId;
    private int day; 
    private CombinationDTO combination;
    private Time startTime;
    private Time endTime;
    private int interval;
    private boolean modeOn;

    public void setName(String name) {
        if (name == null || name.length() < 1 || name.length() > 30) {
            throw new IllegalArgumentException("입력값이 형식에 맞지 않습니다.");
        }
        this.name = name;
    }

    public void setDeviceId(int deviceId) {
        this.deviceId = deviceId;
    }
    
    
    public void setUserId(String userId) {
        if (userId == null || userId.isBlank() || userId.contains(" ") || userId.length() > 30) {
            throw new IllegalArgumentException("입력값이 형식에 맞지 않습니다.");
        }
        this.userId = userId;
    }
    
    public void setDay(int day) {
        if (day < 0 || day > 0b1111111) { // 7비트 이내 값이어야 함 (0 ~ 127)
            throw new IllegalArgumentException("입력값이 형식에 맞지 않습니다.");
        }
        this.day = day;
    }

    public void setStartTime(Time startTime) {
        if (startTime == null) {
            throw new IllegalArgumentException("입력값이 형식에 맞지 않습니다.");
        }
        this.startTime = startTime;
    }

    public void setEndTime(Time endTime) {
        if (endTime == null) {
            throw new IllegalArgumentException("입력값이 형식에 맞지 않습니다.");
        }
        if (this.startTime != null && endTime.before(this.startTime)) {
            throw new IllegalArgumentException("endTime은 startTime 이후여야 합니다.");
        }
        this.endTime = endTime;
    }

    public void setInterval(int interval) {
        if (interval < 0) {
            throw new IllegalArgumentException("입력값이 형식에 맞지 않습니다.");
        }
        this.interval = interval;
    }
    
    public void setModeOn(Boolean modeOn) {
		this.modeOn = modeOn;
	}
    
    @Getter
    @ToString
    @NoArgsConstructor
    @AllArgsConstructor
    public static class CombinationDTO {
        private int id;
        private String name;
        private Integer choice1;
        private Integer choice1Count;
        private Integer choice2;
        private Integer choice2Count;
        private Integer choice3;
        private Integer choice3Count;
        private Integer choice4;
        private Integer choice4Count;
        
        public void setId() {
            this.id = UUID.randomUUID().hashCode() & Integer.MAX_VALUE;
        }

        public void setName(String name) {
            if ((name != null && name.isBlank()) || (name != null && name.length() > 15)) {
                throw new IllegalArgumentException("입력값이 형식에 맞지 않습니다.");
            }
            this.name = name;
        }

        public void setChoice1(Integer choice1) {
            if (choice1 == null || choice1 < 0 || choice1 > 8) {
                throw new IllegalArgumentException("입력값이 형식에 맞지 않습니다.");
            }
            this.choice1 = choice1;
        }

        public void setChoice1Count(Integer choice1Count) {
            this.choice1Count = choice1Count;
        }

        public void setChoice2(Integer choice2) {
            if (choice2 != null && (choice2 < 0 || choice2 > 8)) {
                throw new IllegalArgumentException("입력값이 형식에 맞지 않습니다.");
            }
            this.choice2 = choice2;
        }

        public void setChoice2Count(Integer choice2Count) {
            this.choice2Count = choice2Count;
        }

        public void setChoice3(Integer choice3) {
            if (choice3 != null && (choice3 < 0 || choice3 > 8)) {
                throw new IllegalArgumentException("입력값이 형식에 맞지 않습니다.");
            }
            this.choice3 = choice3;
        }

        public void setChoice3Count(Integer choice3Count) {
            this.choice3Count = choice3Count;
        }

        public void setChoice4(Integer choice4) {
            if (choice4 != null && (choice4 < 0 || choice4 > 8)) {
                throw new IllegalArgumentException("입력값이 형식에 맞지 않습니다.");
            }
            this.choice4 = choice4;
        }

        public void setChoice4Count(Integer choice4Count) {
            this.choice4Count = choice4Count;
        }
    }
}
