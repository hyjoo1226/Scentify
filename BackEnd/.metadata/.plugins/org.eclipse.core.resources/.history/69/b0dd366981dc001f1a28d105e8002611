package com.ssafy.scentify.websocket;

import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;

import com.ssafy.scentify.common.util.TokenProvider;
import com.ssafy.scentify.device.DeviceService;
import com.ssafy.scentify.websocket.model.dto.WebSocketDto.ModeChangeRequest;
import com.ssafy.scentify.websocket.model.dto.WebSocketDto.TempHumRequest;
import com.ssafy.scentify.websocket.model.dto.WebSocketDto.Response;

import io.jsonwebtoken.ExpiredJwtException;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
public class WebSocketController {
	
	private final DeviceService deviceService;
	private final TokenProvider tokenProvider;
	private final SimpMessagingTemplate template;
	
	public WebSocketController(DeviceService deviceService, TokenProvider tokenProvider, SimpMessagingTemplate template) {
		this.deviceService = deviceService;
		this.tokenProvider = tokenProvider;
		this.template = template;
	}
	
	@MessageMapping("/DeviceStatus/Sensor/TempHum")
	@SendTo("/topic/DeviceStatus/Sensor/TempHum" + serial) 
    public Response handleSensorData(@Payload TempHumRequest request) {
        String token = request.getToken();
        
        try {
        	tokenProvider.validateJwtToken(token);
        } catch (ExpiredJwtException e) {
        	log.info("Token 만료됨");
        }
        
        String serial = tokenProvider.getSerial(token);
        //deviceService.addInfo(request);
        return new Response(200);
    }
	
}
