package com.ssafy.scentify.device.model.entity;

import jakarta.validation.constraints.NotBlank;
import lombok.*;

@Getter
@ToString
@NoArgsConstructor
@AllArgsConstructor
public class Device {
	@NotBlank
    private Integer id;
	@NotBlank
	private String serial;
	@NotBlank
    private String name;
	@NotBlank
	private String userId;
    private Integer groupId;
    @NotBlank
    private String ipAddress;
    private Integer roomType;
    private Integer slot1;
    private Integer slot1RemainingRatio;
    private Integer slot2;
    private Integer slot2RemainingRatio;
    private Integer slot3;
    private Integer slot3RemainingRatio;
    private Integer slot4;
    private Integer slot4RemainingRatio;
    private Boolean mode;
    private Float temperature;
    private Integer humidity;
    private Integer defaultCombination;
    
    public void setId() {
        this.id = UUID.randomUUID().hashCode();
    }

    public void setSerial(String serial) {
        if (serial == null || !serial.matches("[a-zA-Z0-9]{12}")) {
            throw new IllegalArgumentException("Invalid serial: must be 12 characters long, containing only letters and digits.");
        }
        this.serial = serial;
    }

    public void setName(String name) {
        if (name == null || name.isBlank() || name.length() > 15) {
            throw new IllegalArgumentException("Invalid name: must be between 1 and 15 characters.");
        }
        this.name = name;
    }

    public void setUserId(String userId) {
        if (userId == null || userId.isBlank() || userId.length() > 9) {
            throw new IllegalArgumentException("Invalid userId: must not exceed 9 characters and cannot contain blanks.");
        }
        this.userId = userId;
    }

    public void setIpAddress(String ipAddress) {
        String ipPattern = 
            "^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\." +
            "(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\." +
            "(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\." +
            "(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$";
        if (ipAddress == null || !Pattern.matches(ipPattern, ipAddress)) {
            throw new IllegalArgumentException("Invalid IP address.");
        }
        this.ipAddress = ipAddress;
    }

    public void setRoomType(Integer roomType) {
        if (roomType == null || (roomType != 0 && roomType != 1)) {
            throw new IllegalArgumentException("Invalid roomType: must be 0 or 1.");
        }
        this.roomType = roomType;
    }

    private void validateSlot(Integer slot, String slotName) {
        if (slot == null || slot < 0 || slot > 8) {
            throw new IllegalArgumentException("Invalid " + slotName + ": must be between 0 and 8.");
        }
    }

    public void setSlot1(Integer slot1) {
        validateSlot(slot1, "slot1");
        this.slot1 = slot1;
    }

    public void setSlot1RemainingRatio(Integer slot1RemainingRatio) {
        if (slot1RemainingRatio == null || slot1RemainingRatio < 0 || slot1RemainingRatio > 100) {
            throw new IllegalArgumentException("Invalid slot1RemainingRatio: must be between 0 and 100.");
        }
        this.slot1RemainingRatio = slot1RemainingRatio;
    }

    public void setSlot2(Integer slot2) {
        validateSlot(slot2, "slot2");
        this.slot2 = slot2;
    }

    public void setSlot2RemainingRatio(Integer slot2RemainingRatio) {
        if (slot2RemainingRatio == null || slot2RemainingRatio < 0 || slot2RemainingRatio > 100) {
            throw new IllegalArgumentException("Invalid slot2RemainingRatio: must be between 0 and 100.");
        }
        this.slot2RemainingRatio = slot2RemainingRatio;
    }

    public void setSlot3(Integer slot3) {
        validateSlot(slot3, "slot3");
        this.slot3 = slot3;
    }

    public void setSlot3RemainingRatio(Integer slot3RemainingRatio) {
        if (slot3RemainingRatio == null || slot3RemainingRatio < 0 || slot3RemainingRatio > 100) {
            throw new IllegalArgumentException("Invalid slot3RemainingRatio: must be between 0 and 100.");
        }
        this.slot3RemainingRatio = slot3RemainingRatio;
    }

    public void setSlot4(Integer slot4) {
        validateSlot(slot4, "slot4");
        this.slot4 = slot4;
    }

    public void setSlot4RemainingRatio(Integer slot4RemainingRatio) {
        if (slot4RemainingRatio == null || slot4RemainingRatio < 0 || slot4RemainingRatio > 100) {
            throw new IllegalArgumentException("Invalid slot4RemainingRatio: must be between 0 and 100.");
        }
        this.slot4RemainingRatio = slot4RemainingRatio;
    }

    public void setMode(Boolean mode) {
        this.mode = mode;
    }

    public void setTemperature(Float temperature) {
        this.temperature = temperature;
    }

    public void setHumidity(Integer humidity) {
        this.humidity = humidity;
    }

    public void setDefaultCombination(Integer defaultCombination) {
        this.defaultCombination = defaultCombination;
    }

}

