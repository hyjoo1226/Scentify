package com.ssafy.scentify.websocket;

import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;

import com.ssafy.scentify.common.util.TokenProvider;
import com.ssafy.scentify.device.DeviceService;
import com.ssafy.scentify.websocket.model.dto.WebSocketDto.CapsuleInfoRequest;
import com.ssafy.scentify.websocket.model.dto.WebSocketDto.ModeChangeRequest;
import com.ssafy.scentify.websocket.model.dto.WebSocketDto.TempHumRequest;
import com.ssafy.scentify.websocket.model.dto.WebSocketDto.Response;

import io.jsonwebtoken.ExpiredJwtException;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
public class WebSocketController {
	
	private final DeviceService deviceService;
	private final TokenProvider tokenProvider;
	private final SimpMessagingTemplate template;
	
	public WebSocketController(DeviceService deviceService, TokenProvider tokenProvider, SimpMessagingTemplate template) {
		this.deviceService = deviceService;
		this.tokenProvider = tokenProvider;
		this.template = template;
	}
	
	// API 15번 : RB 온습도 정보 수신
	@MessageMapping("/DeviceStatus/Sensor/TempHum")
	public void handleSensorData(@Payload TempHumRequest request) {
	    String token = request.getToken();
	    String serial;

	    try {
	        tokenProvider.validateJwtToken(token);
	        serial = tokenProvider.getSerial(token);
	        
	    } catch (ExpiredJwtException e) {
	        log.info("Token 만료됨");
	        
	        serial = tokenProvider.getSerial(token);
	        template.convertAndSend("/topic/DeviceStatus/Sensor/TempHum/" + serial , new Response(400));
	        return;
	    }

	    deviceService.updateTempHum(serial, request);
	    log.info("Data processed for serial: {}", serial);

	    // 특정 사용자에게만 메시지 전송
	    template.convertAndSend("/topic/DeviceStatus/Sensor/TempHum/" + serial, new Response(200));
	}
	
	public void sendCapsuleInfo(String serial, CapsuleInfoRequest infoRequest) {
        // 메시지 전송
        template.convertAndSend("/topic/DeviceStatus/Capsule/Info" + serial, infoRequest);
    }
	
	@MessageMapping("/DeviceStatus/Sensor/TempHum")
	public void handleSensorData(@Payload TempHumRequest request) {
	    String token = request.getToken();
	    String serial;

	    try {
	        tokenProvider.validateJwtToken(token);
	        serial = tokenProvider.getSerial(token);
	        
	    } catch (ExpiredJwtException e) {
	        log.info("Token 만료됨");
	        
	        serial = tokenProvider.getSerial(token);
	        template.convertAndSend("/topic/DeviceStatus/Sensor/TempHum/" + serial , new Response(400));
	        return;
	    }

	    deviceService.updateTempHum(serial, request);
	    log.info("Data processed for serial: {}", serial);

	    // 특정 사용자에게만 메시지 전송
	    template.convertAndSend("/topic/DeviceStatus/Sensor/TempHum/" + serial, new Response(200));
	}
	
}
