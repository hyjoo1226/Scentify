package com.ssafy.scentify.home;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ssafy.scentify.common.util.TokenProvider;
import com.ssafy.scentify.device.DeviceService;
import com.ssafy.scentify.home.model.dto.HomeDto.DeviceHomeDto;
import com.ssafy.scentify.home.model.dto.HomeDto.UserHomeDto;
import com.ssafy.scentify.user.service.UserService;

import lombok.extern.slf4j.Slf4j;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;

@Slf4j
@RequestMapping("/v1/home")
@RestController
public class HomeController {
	
	private final UserService userService;
	private final DeviceService deviceService;
	private final TokenProvider tokenProvider;
	
	public HomeController(UserService userService, DeviceService deviceService, TokenProvider tokenProvider) {
		this.userService = userService;
		this.deviceService = deviceService;
		this.tokenProvider = tokenProvider;
	}
	
	
	@PostMapping("/info")
	public ResponseEntity<?> getHomeInfo(@RequestHeader("Authorization") String authorizationHeader) {
		try {
			// "Bearer " 제거
	        if (!authorizationHeader.startsWith("Bearer ")) {
	            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
	        }
	        String token = authorizationHeader.substring(7);
	        
	        // 토큰에서 id 추출
	        String userId = tokenProvider.getId(token);
			
	        // user 서비스 정보 DB에서 가져오기
	        UserHomeDto userHomeDto = userService.getUserHomeInfoById(userId);
	        
	        // 메인 디바이스가 설정되어 있으면 정보 가져오기
	        DeviceHomeDto deviceHomeDto = null;
	        if (userHomeDto.getMainDeviceId() != null) {
		        // 메인 기기 정보 DB에서 가져오기
		        deviceHomeDto = deviceService.getDeviceHomeInfoById(userHomeDto.getMainDeviceId()); 
	        }
	        
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (Exception e) {
			 // 예기치 않은 에러 처리
			log.error("Exception: ", e);
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
	}
	
}
